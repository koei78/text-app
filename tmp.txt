            <div className="h-96 overflow-y-auto p-6 space-y-4">
              {conversationMessages.length === 0 ? (
                <div className="text-center py-8">
                  <MessageCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">縺ｾ縺繝｡繝・そ繝ｼ繧ｸ縺後≠繧翫∪縺帙ｓ</p>
                  <p className="text-sm text-muted-foreground">譛蛻昴・繝｡繝・そ繝ｼ繧ｸ繧帝√▲縺ｦ縺ｿ縺ｾ縺励ｇ縺・ｼ・/p>
                </div>
              ) : (
                conversationMessages.map((msg, index) => {
                  const isCurrentUser = msg.fromUserId === user.id
                  const showDate =
                    index === 0 ||
                    new Date(msg.createdAt).toDateString() !==
                      new Date(conversationMessages[index - 1].createdAt).toDateString()

                  return (
                    <div key={msg.id}>
                      {showDate && (
                        <div className="text-center my-4">
                          <span className="text-xs text-muted-foreground bg-muted px-3 py-1 rounded-full">
                            {new Date(msg.createdAt).toLocaleDateString("ja-JP", {
                              year: "numeric",
                              month: "long",
                              day: "numeric",
                            })}
                          </span>
                        </div>
                      )}
                      <div className={`flex ${isCurrentUser ? "justify-end" : "justify-start"}`}>
                        <div
                          className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                            isCurrentUser ? "bg-primary text-primary-foreground" : "bg-muted text-foreground"
                          }`}
                        >
                          <p className="text-sm leading-relaxed">{msg.text}</p>
                          <div className="flex items-center justify-between mt-2">
                            <span className="text-xs opacity-70">{formatTime(msg.createdAt)}</span>
                            {isCurrentUser && (
                              <div className="flex items-center gap-1">
                                {msg.read ? (
                                  <div className="text-xs opacity-70">譌｢隱ｭ</div>
                                ) : (
                                  <div className="text-xs opacity-70">譛ｪ隱ｭ</div>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  )
                })
              )}

              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-muted text-foreground px-4 py-3 rounded-2xl max-w-xs">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="border-t p-4">
              <form onSubmit={handleSendMessage} className="flex gap-3">
                <Input
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  placeholder="繝｡繝・そ繝ｼ繧ｸ繧貞・蜉・.."
                  className="flex-1 h-12"
                  disabled={isTyping}
                />
                <Button type="submit" size="sm" className="h-12 px-6" disabled={!message.trim() || isTyping}>
                  <Send className="h-4 w-4" />
                </Button>
              </form>
              <div className="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
                <Clock className="h-3 w-3" />
                <span>Enter繧ｭ繝ｼ縺ｧ騾∽ｿ｡</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Chat Guidelines */}
        <Card className="border-0 bg-gradient-to-r from-accent/10 to-secondary/10 backdrop-blur">
          <CardContent className="p-6">
            <h3 className="font-semibold text-foreground mb-3">繝√Ε繝・ヨ縺ｮ縺顔ｴ・據</h3>
            <ul className="space-y-2 text-sm text-muted-foreground">
              <li>窶｢ 荳∝ｯｧ縺ｪ險闡蛾▲縺・ｒ蠢・′縺代∪縺励ｇ縺・/li>
              <li>窶｢ 蛻・°繧峨↑縺・％縺ｨ縺ｯ驕諷ｮ縺ｪ縺剰ｳｪ蝠上＠縺ｾ縺励ｇ縺・/li>
              <li>窶｢ 逶ｸ謇九・豌玲戟縺｡繧定・∴縺ｦ逋ｺ險縺励∪縺励ｇ縺・/li>
              <li>窶｢ 蜍牙ｼｷ莉･螟悶・逶ｸ隲・ｂ螟ｧ豁楢ｿ弱〒縺・/li>
            </ul>
          </CardContent>
        </Card>

        {/* Quick Responses for Students */}
        {user.role === "student" && (
          <Card className="border-0 bg-card/80 backdrop-blur">
            <CardHeader>
              <CardTitle className="text-lg">繧医￥菴ｿ縺・Γ繝・そ繝ｼ繧ｸ</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid gap-2 sm:grid-cols-2">
                {[
                  "蛻・°繧峨↑縺・撫鬘後′縺ゅｊ縺ｾ縺・,
                  "螳ｿ鬘後↓縺､縺・※雉ｪ蝠上′縺ゅｊ縺ｾ縺・,
                  "莉頑律縺ｮ謗域･ｭ縺ｯ縺ｩ縺・〒縺励◆縺具ｼ・,
                  "縺ゅｊ縺後→縺・＃縺悶＞縺ｾ縺励◆・・,
                ].map((quickMessage) => (
                  <Button
                    key={quickMessage}
                    variant="outline"
                    size="sm"
                    onClick={() => setMessage(quickMessage)}
                    className="justify-start text-left h-auto py-2 px-3 bg-transparent"
                  >
                    {quickMessage}
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </StudentLayout>
  )
}
